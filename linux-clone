#!/bin/bash

# Copyright (c) 2021 by Philip Collier, github.com/AB9IL
# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version. There is NO warranty; not even for
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

# IMPORTANT!  SELECT the correct values here or you will destroy 
# data you probably do not want to destroy!!!!
echo "--- System Installer [RUN THIS WITH SUDO] ---"
echo -e "\nClone your present system to a partition you select."
echo -e "\nHit [Enter] to begin or [Ctrl + C] to quit..."
read line

export PARTITION=$(fdisk -l | awk '{print $1}' | grep '^/dev/' | \
    fzf --header="Select Partition" | xargs -I {} echo "{}")

# quit if nothing selected
[[ -z "$PARTITION" ]] && echo "Exiting. No partition selected." && exit 0

echo "Are you sure that you want to install this filesystem
onto $PARTITION?"
echo 'Please answer "yes" or "no"'
read line
case "$line" in
    yes|Yes) echo "Okay, cloning will now begin!" ;;
    *) echo '"yes" not received, exiting the script.'; exit 0 ;;
esac

# mount the partition and set variables 
mount $PARTITION /mnt
export MYMOUNT="/mnt"
export MYUUID=$(echo $(lsblk -no UUID $PARTITION))
export MYDEV=$(echo ${PARTITION//[0-9]/})

# install grub
grub-install --force --no-floppy --boot-directory=$MYMOUNT/boot $MYDEV

# install the filesystem
rsync -axHAWXS \
  --delete \
  --numeric-ids \
  --info=progress2 \
  --exclude='/cdrom' \
  --exclude='/home/*/.gvfs' \
  --exclude='/home/*/.local/share/Trash' \
  --exclude='/var/run/*' \
  --exclude='/var/lock/*' \
  --exclude='/lib/modules/*/volatile/.mounted' \
  --exclude='/var/cache/apt/archives/*' \
  --exclude='/home/*/.mozilla/firefox/*/Cache' \
  --exclude='/home/*/.cache/chromium' \
  --exclude='home/*/.thumbnails' \
  --exclude Cache --exclude cache \
  / $MYMOUNT/ > ~/rsync.out 2> ~/rsync.err

echo "UUID=$MYUUID /   ext4    discard,noatime,nodiratime,errors=remount-ro 0 1" > $MYMOUNT/etc/fstab
cp /etc/hosts $MYMOUNT/etc/hosts

# Chroot into the newly written filesystem
# Use the built-in chroot-manager script

mount -o bind /run/ $MYMOUNT/run
mount --bind /dev $MYMOUNT/dev
mount --bind /proc $MYMOUNT/proc

echo 'Now entering the new filesystem...'
echo 'You will be the root user.'
echo 'Make changes then "exit" to leave...'

chroot $MYMOUNT update-grub
chroot $MYMOUNT chroot-manager enter

# Unmount after exiting the chroot
umount $MYMOUNT/run
umount $MYMOUNT/proc
umount $MYMOUNT/dev
